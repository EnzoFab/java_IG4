// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;         private String login;         //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    openConnection();    this.login = "Anonymous";        this.sendToServer("#login "+ this.getLogin() ) ;  }    public ChatClient(String host, int port, ChatIF clientUI, String login) 		    throws IOException {	super(host, port); //Call the superclass constructor			this.clientUI = clientUI;	openConnection();	 this.login = login ;   	this.sendToServer("#login "+ login ) ;}    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {	  if(message.charAt(0) == '#'){		  String c = message.split("#")[1]; // get the commande without '#'		  String [] str = c.split(" ");		  String command = str[0];		  String parameter= "";		  if(str.length >1){			  parameter= str[1];		  }		  		  switch(command.toLowerCase()){		  		  	case "quit":		  		System.out.println("Bye ! ");		  		quit();		  		break;		  				  	case "logoff":		  		if(this.isConnected()){		  			try {						this.closeConnection();					} catch (IOException e1) {						// TODO Auto-generated catch block						e1.printStackTrace();					}		  		}else{		  			System.out.println("You are not connected");		  		}						  		break;		  				  	case "login": // try to connect		  		if(!this.isConnected()){// connect if client is disconnected 		  			try {		  				System.out.println("Try to connect to "+this.getHost());						this.openConnection();						this.sendToServer("#login "+parameter); // envoie de #login + id						System.out.println("Connected to "+getHost());					} catch (IOException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}		  		}else		  			System.out.print("Error client already connected to a server");		  		break;		  				  	case "getport":		  		System.out.println("Port: "+this.getPort() );		  		break;		  				  	case "gethost":		  		System.out.println("Host: "+this.getHost());		  		break;		  				  	case "setport":		  		if(!this.isConnected()){		  			int newp =  Integer.parseInt(parameter);		  			this.setPort(newp );		  			System.out.println("New port: "+ this.getPort());		  		}else		  			System.out.println("Error you are still connected to a Server");		  				  		break;		  				  	case "sethost":		  		if(!this.isConnected()){		  			this.setHost(parameter);		  			System.out.print("New host: " + this.getHost());		  		}else		  			System.out.println("Error you are still connected to a Server");		  		break;		  				  				  	default:		  		System.out.println("Command unknown");		  }	  }else {		  		  try		    {		      sendToServer(message);		    }		    catch(IOException e)		    {		      clientUI.display		        ("Could not send message to server.  Terminating client.");		      quit();		    }	  }     }    /**   * This method terminates the client.   */  public void quit()  {	  if(!this.isConnected()){		  try		    {		      closeConnection();		    }		    catch(IOException e) {}		    try {		    	System.out.println("Program will stop");				Thread.sleep(1000);				 System.exit(0);			} catch (InterruptedException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	  }else{		  try {		    	System.out.println("Program will stop");				Thread.sleep(1000);				 System.exit(0);			} catch (InterruptedException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	  }       }      public String getLogin() {		return login;	  }	    public void setLogin(String s){	  this.login = s;  }      protected void connectionException(Exception exception) {	  System.out.println("Server has stopped brutally");	  exception.printStackTrace();	  System.exit(-1); // stop the program with an error 	    }      protected void connectionClosed() {	  System.out.println("Connection with "+ this.getHost() +" closed");	   }  }//End of ChatClient class